## Sample config file for pyznap. Save the config under /etc/pyznap/pyznap.conf or use the
## --config flag. Values get passed down recursively, so if you want a child filesystem to have
## a different strategy you only need to specify the values that are different from the parent
## filesystem. For remote syncronisation always keep enough snapshots on the destination. If there
## are no common snapshots the destination has to be destroyed and a full stream has to be sent.
## ssh locations are always specified with 'ssh:port:user@host:poolname/filesystem'.
## Lines starting with '#' will be ignored.
#
#
#
## Some example configs:
#
## Take regular snapshots on a filesystem
# [rpool/filesystem]
# frequent = 4                          # Keep 4 frequent snapshots
# hourly = 24                           # Keep 24 hourly snapshots
# daily = 7                             # Keep 7 daily snapshots
# weekly = 4                            # Keep 4 weekly snapshots
# monthly = 6                           # Keep 6 monthly snapshots
# yearly = 1                            # Keep 1 yearly snapshot
# snap = yes                            # Take snapshots on this filesystem
# clean = yes                           # Delete old snapshots on this filesystem
# prune_sanoid = no                     # Prune sanoid snapshots yes|no
# dry_run = yes                         # Use dry-run mode? yes|no
# dest = backup/filesystem              # Backup this filesystem on this location
# exclude = rpool/filesystem/data/*     # Exclude these datasets for pyznap send
#
#
## Missing values will be filled automatically if parent is in config
# [rpool/filesystem/data]
# hourly = 12                           # Strategy will be hourly=12, daily=7, weekly=4, ...
# dest = data/backup                    # Send child to another location as well
#
#
## Backup location
# [backup/filesystem]
# hourly = 48                           # Keep more older snapshots in backup location
# snap = no                             # Don't take new snapshots on backup location
# clean = yes                           # Delete old snapshots
#
## You can send backups to a remote location
# [rpool/data]
# hourly = 24
# snap = yes
# clean = yes
# dest = ssh:22:user@host:backup/data   # Specify ssh destination
# dest_keys = /home/user/.ssh/id_rsa    # Provide key for ssh login. If none given, look in home dir
# compress = gzip                       # Use gzip compression for sending over ssh
#
## You can also take snapshots on a remote and pull snapshots from there
# [ssh:22:user@host:rpool/data]
# key = /home/user/.ssh/id_rsa          # Provide key for ssh login. If none given, look in home dir
# hourly = 24
# snap = yes
# clean = yes
# dest = tank/data
# compress = lz4
#
## You can give multiple dest. Filesystem will be sent to all of them
# [tank/data]
# hourly = 24
# snap = yes
# clean = yes
# dest = backup/data, ssh::user@host0:backup/data, ssh:22:user@host1:backup/data
# dest_keys = /home/user/.ssh/id_rsa, /home/user/.ssh/id_rsa
# compress = lzop, none
# raw_send = no, yes
# exclude = tank/data/home, */home */media/* */logs
